<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd "
	default-lazy-init="true">

	<description>Shiro Configuration</description>

	<!-- 加载配置属性文件 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:fyjf.properties" />

	<!-- Shiro权限过滤过滤器定义     anon 不需要认证    authc需要认证
		============其权限过滤器及配置释义===========
			anon   org.apache.shiro.web.filter.authc.AnonymousFilter			 
			authc  org.apache.shiro.web.filter.authc.FormAuthenticationFilter			 
			authcBasic org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter			 
			perms  org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter			 
			port   org.apache.shiro.web.filter.authz.PortFilter			 
			rest   org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter			 
			roles  org.apache.shiro.web.filter.authz.RolesAuthorizationFilter			 
			ssl    org.apache.shiro.web.filter.authz.SslFilter			 
			user   org.apache.shiro.web.filter.authc.UserFilter			 
			logout org.apache.shiro.web.filter.authc.LogoutFilter
			anon:例子/admins/**=anon 没有参数，表示可以匿名使用。
			authc:例如/admins/user/**=authc表示需要认证(登录)才能使用，没有参数
			roles：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。
			perms：例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
			rest：例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等。
			port：例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
			authcBasic：例如/admins/user/**=authcBasic没有参数表示httpBasic认证
			ssl:例子/admins/user/**=ssl没有参数，表示安全的url请求，协议为https
			user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查
	-->
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value>
				/index=anon
				/error_400=anon
				/error_500=anon
				/auth_fail=anon
				${adminPath}/**=authc
			</value>
		</constructor-arg>
	</bean>

	<!-- CAS认证过滤器 -->
	<bean id="casFilter" class="org.apache.shiro.cas.CasFilter">
		<property name="failureUrl" value="/error_400" />
	</bean>

	<!-- 安全认证过滤器 -->
	 <!--   
       Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行  
       Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持   
    -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->  
		<property name="securityManager" ref="securityManager" />
		<!--<property name="loginUrl" value="${cas.server.url}?service=${cas.project.url}${adminPath}/cas"/> -->
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 --> 
		<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->  
        <!-- <property name="successUrl" value="/" ></property> -->  
		<property name="loginUrl" value="/index" /> 
		<!--登录成功之后，可能获取用户数据，跳转到登录成功
		<property name="successUrl" value="${adminPath}/login/success" />-->  
		<!-- 用户访问未对其授权的资源时，所显示的连接  --> 
        <property name="unauthorizedUrl" value="auth_fail"></property>  
        
		<property name="filterChainDefinitions">
			<ref bean="shiroFilterChainDefinitions" />
		</property>
	</bean>

	<!-- 自定义会话管理配置 -->
	<bean id="sessionManager"
		class="com.fyjf.common.security.shiro.session.SessionManager">
		<property name="sessionDAO" ref="sessionDAO" />

		<!-- 会话超时时间，单位：毫秒 -->
		<property name="globalSessionTimeout" value="${session.sessionTimeout}" />

		<!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话 -->
		<property name="sessionValidationInterval" value="${session.sessionTimeoutClean}" />
		<!-- <property name="sessionValidationSchedulerEnabled" value="false"/> -->
		<property name="sessionValidationSchedulerEnabled" value="true" />

		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<property name="sessionIdCookieEnabled" value="true" />
	</bean>

	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="systemAuthorizingRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>


	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID, 
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="fyjf.session.id" />
	</bean>

	<!-- 自定义Session存储容器 -->
	<!-- <bean id="sessionDAO" class="JedisSessionDAO"> -->
	<!-- <property name="sessionIdGenerator" ref="idGen" /> -->
	<!-- <property name="sessionKeyPrefix" value="${redis.keyPrefix}_session_" 
		/> -->
	<!-- </bean> -->
	<bean id="sessionDAO"
		class="com.fyjf.common.security.shiro.session.CacheSessionDAO">
		<property name="sessionIdGenerator" ref="idGen" />
		<property name="activeSessionsCacheName" value="activeSessionsCache" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>

	<!-- 定义授权缓存管理器 -->
	<!-- <bean id="shiroCacheManager" class="SessionCacheManager" /> -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	
    
     <!-- 缓存管理 
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean> 
    -->  

	<!-- AOP式方法级权限检查     开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，并在必要时进行安全逻辑验证 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>